<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Physics Virtuosi</title><link href="/" rel="alternate"></link><link href="http://thephysicsvirtuosi.com/feeds/tag.storage.atom.xml" rel="self"></link><id>/</id><updated>2012-03-14T15:13:00-04:00</updated><entry><title>PiÂ storage</title><link href="/posts/pi-storage.html" rel="alternate"></link><updated>2012-03-14T15:13:00-04:00</updated><author><name>Alemi</name></author><id>tag:,2012-03-14:posts/pi-storage.html</id><summary type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-4x2fD-exJns/T2DAEJqroqI/AAAAAAAAAbI/8_9quiDP4p0/s1600/floppies.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="155" src="http://4.bp.blogspot.com/-4x2fD-exJns/T2DAEJqroqI/AAAAAAAAAbI/8_9quiDP4p0/s320/floppies.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Let me share my worst &amp;#8220;best idea ever&amp;#8221; moment.  Sometime during my undergraduate I thought I had solved all the world&amp;#8217;s&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;You see, on this fateful day, my hard drive was full. I hate it when my hard drive fills up, it means I have to go and get rid of some of my stuff.  I hate getting rid of my stuff.  But what can someone&amp;nbsp;do?&lt;/p&gt;
&lt;p&gt;And then it hit me, I had the bright idea:
&lt;blockquote class="tr_bq"&gt;What if we didn&amp;#8217;t have to &lt;i&gt;store&lt;/i&gt; things, what if we could just &lt;i&gt;compute&lt;/i&gt; files whenever we wanted them back?&lt;/blockquote&gt;Sounds like an awesome idea, right?  I know.  But how could we compute our files?  Well, as you may know pi is conjectured to be a &lt;a href="http://en.wikipedia.org/wiki/Normal_number"&gt;normal number&lt;/a&gt;, meaning its digits are probably random.  We also know that it is irrational, meaning pi never&amp;nbsp;ends&amp;#8230;.&lt;/p&gt;
&lt;p&gt;&lt;a name='more'&gt;&lt;/a&gt;
Since its digits are random, and they never end, in principle any sequence you could ever imagine should show up in pi eventually.  In fact there is a nifty website &lt;a href="http://pi.nersc.gov/"&gt;here&lt;/a&gt; that will let you search for arbitrary strings (using a 5-bit format) in first 4 billion digits, for example &amp;#8220;alemi&amp;#8221; &lt;a href="http://pi.nersc.gov/cgi-bin/pi.cgi?word=alemi&amp;amp;format=char"&gt;seems to show up&lt;/a&gt; at around digit&amp;nbsp;3149096356.&lt;/p&gt;
&lt;p&gt;So in principle, I could send you just an index, and a length, and you could compute the resulting&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;But wait you cry, isn&amp;#8217;t computing digits of pi hard, don&amp;#8217;t people work really hard to compute pi farther and farther?  Hold on I claim, first of all, I&amp;#8217;m imagining a future where computation is cheap.  Secondly, there is a really neat algorithm, the &lt;a href="http://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula"&gt;&lt;span class="caps"&gt;BBP&lt;/span&gt; algorithm&lt;/a&gt;, that enables you to compute the kth binary digit of pi without knowing any of the preceding digits.  In other words, in principle if you wanted to know the 4 billionth digit of pi, you can compute it without having to first compute the first 4 billion other&amp;nbsp;digits.&lt;/p&gt;
&lt;p&gt;Cool, this is beginning to sound like a really good idea.  What&amp;#8217;s the&amp;nbsp;catch?&lt;/p&gt;
&lt;p&gt;Perhaps you&amp;#8217;ve already gotten a taste of it.  Let&amp;#8217;s try to estimate just how far along in pi we would have to look before our message of interest shows&amp;nbsp;up. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s assume we have written our file in binary, and are computing pi in binary&amp;nbsp;e.g.&lt;/p&gt;
&lt;blockquote&gt;11.
00100100 00111111 01101010 10001000 10000101 10100011 00001000 11010011&lt;/blockquote&gt;

&lt;p&gt;etc.  So, if the sequence is random, there is a 1/2 chance that at any point we get the right starting bit of our file, and then a 1/2 chance we get the next one, etc.  So the chance that we would create our file if we were randomly flipping coins would be
&lt;mathjax&gt;$$ P = \left( \frac{1}{2} \right)^N = 2^{-N} $$&lt;/mathjax&gt;
if our file was N bits&amp;nbsp;long.&lt;/p&gt;
&lt;p&gt;So where do we expect this sequence to first show up in the digits of pi?  Well, this turns out to be a &lt;a href="http://mathworld.wolfram.com/CoinTossing.html"&gt;subtle problem&lt;/a&gt;, but we can get a feel for it by assuming that we compute N digits of pi at a time and see if its right or not.  If its not, we move on to the next group of N digits, if its right, we&amp;#8217;re done.  If this were the case, we should expect to have to draw about
&lt;mathjax&gt;$$ \frac{1}{P} = 2^N $$&lt;/mathjax&gt;
times until we have a success, and since each trial ate up N digits, we should expect to see our file show up after about
&lt;mathjax&gt;$$ N 2^N $$&lt;/mathjax&gt;
digits of&amp;nbsp;pi.&lt;/p&gt;
&lt;p&gt;Great, so instead of handing you the file, I could just hand you the index the file is located.  But how many bits would I need to tell you that index.  Well, just like we know that 10^3 takes 4 digits to express in decimal, and 6 x 10^7 takes 8 digits to express, in general it takes
&lt;mathjax&gt;$$ d = \log_b x + 1 $$&lt;/mathjax&gt;
digits to express a number in base b, in this case it takes
&lt;mathjax&gt;$$ d = \log_2 ( N 2^N ) + 1= \log_2 2^N + \log_2 N + 1 = N + \log_2 N + 1 $$&lt;/mathjax&gt;
digits to express this index in&amp;nbsp;binary.&lt;/p&gt;
&lt;p&gt;And there&amp;#8217;s the rub.  Instead of sending you N bits of information contained in the file, all my genius compression algorithm has manged to do is replace N bits of information in the file, with a number that takes ( ~ N + \log_2 N ) bits to express.  I&amp;#8217;ve actually managed to make the files larger not&amp;nbsp;smaller!&lt;/p&gt;
&lt;p&gt;You may have noticed above, that even for the simple case of &amp;#8220;alemi&amp;#8221;, all I managed to do was swap the binary&amp;nbsp;message&lt;/p&gt;
&lt;blockquote class="tr_bq"&gt;alemi -&amp;gt; 0000101100001010110101001
with the index 3149096356 -&amp;gt; 10111011101100110110010110100100&lt;/blockquote&gt;

&lt;p&gt;which is longer in&amp;nbsp;binary!&lt;/p&gt;
&lt;p&gt;As an aside, you may have felt uncomfortable with my estimation for how long we have to wait to see our message, and you would be right.  Just because all N digits I draw at a time don&amp;#8217;t match up doesn&amp;#8217;t mean that the second half isn&amp;#8217;t useful.  For instance if I was looking for 010, lets say some of the digits are 101,010.  While both of those sequences didn&amp;#8217;t match, if I was looking at every digit at a time, I would have found a match.  And you&amp;#8217;d be right.  &lt;a href="http://www.cs.elte.hu/~mori/cikkek/Expectation.pdf"&gt;Smarter people than I&lt;/a&gt; have computed just how long you should have to wait, and end up with the better estimation
&lt;mathjax&gt;$$ \text{wait time} \sim 2^N N \log 2 $$&lt;/mathjax&gt;
which is pretty darn close to our silly&amp;nbsp;estimate. &lt;/p&gt;</summary><category term="pi day"></category><category term="fun"></category><category term="probability"></category><category term="storage"></category></entry></feed>